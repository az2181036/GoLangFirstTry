Index: util/myalgorithm.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- util/myalgorithm.go	(date 1614821880825)
+++ util/myalgorithm.go	(date 1614821880825)
@@ -12,14 +12,13 @@
 func (t SecNewTasks) Swap(i, j int) { t[i], t[j] = t[j], t[i] }
 func (t SecNewTasks) Less(i, j int) bool { return t[i].StartTime < t[j].StartTime }
 
-func MyAlgorithm(dc class.Datacenter, edges []class.Edge, o int) []int{
+func MyAlgorithm(dc class.Datacenter, edges []class.Edge, clusterings [][]int) []int{
 	var MigSide, RecSide, vis []int
 	var dcTaskQueue []class.Task
-	clusterings := GetClusterings(edges)
 	cntMigrationToEdge := 0
 	cntMigrationToCloud := 0
 	for i := 0; i < len(clusterings); i++ {
-		MigSide, RecSide = cloud_edge.GetInitBipartiteGraph(clusterings[i])
+		MigSide, RecSide = cloud_edge.GetInitBipartiteGraph(clusterings[i], edges)
 		for ; len(MigSide) > 0; {
 			vis = make([]int, len(MigSide))
 			adjacencyList := cloud_edge.GetBipartiteGraphEdge(clusterings[i], MigSide, RecSide)
@@ -68,10 +67,10 @@
 			cnt += len(clusterings[i][j].TaskQueue)
 		}
 	}
-	return []int{class.TASK_NUMBER_UPPER_LIMIT[o], cntMigrationToEdge, cntMigrationToCloud,
+	return []int{cntMigrationToEdge, cntMigrationToCloud,
 		cnt, cntDDLViolate}
 }
 
-func GetClusterings(edges []class.Edge) [][]class.Edge {
+func GetClusterings(edges []class.Edge) [][]int {
 	return Kmeans(class.M, cloud_edge.N, edges)
 }
